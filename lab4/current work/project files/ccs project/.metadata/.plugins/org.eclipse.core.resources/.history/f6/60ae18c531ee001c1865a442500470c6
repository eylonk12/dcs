#include  "../header/halGPIO.h"     // private library - HAL layer


// variables

//--------------------------------------------------------------------
//             System Configuration  
//--------------------------------------------------------------------
void sysConfig(void){ 
	GPIOconfig();
	TIMERconfig();
}


//******************************************************************
//                  LCD functions.
//******************************************************************

//******************************************************************
// send a command to the LCD
//******************************************************************
void lcd_cmd(unsigned char c){
  
	LCD_WAIT; // may check LCD busy flag, or just delay a little, depending on lcd.h

	if (LCD_MODE == FOURBIT_MODE)
	{
		LCD_DATA_WRITE &= ~OUTPUT_DATA;// clear bits before new write
                LCD_DATA_WRITE |= ((c >> 4) & 0x0F) << LCD_DATA_OFFSET;
		lcd_strobe();
                LCD_DATA_WRITE &= ~OUTPUT_DATA;
    		LCD_DATA_WRITE |= (c & (0x0F)) << LCD_DATA_OFFSET;
		lcd_strobe();
	}
	else
	{
		LCD_DATA_WRITE = c;
		lcd_strobe();
	}
}
//******************************************************************
// send data to the LCD
//******************************************************************
void lcd_data(unsigned char c){
        
	LCD_WAIT; // may check LCD busy flag, or just delay a little, depending on lcd.h

	LCD_DATA_WRITE &= ~OUTPUT_DATA;       
	LCD_RS(1);
	if (LCD_MODE == FOURBIT_MODE)
	{
    		LCD_DATA_WRITE &= ~OUTPUT_DATA;
                LCD_DATA_WRITE |= ((c >> 4) & 0x0F) << LCD_DATA_OFFSET;  
		lcd_strobe();		
                LCD_DATA_WRITE &= (0xF0 << LCD_DATA_OFFSET) | (0xF0 >> 8 - LCD_DATA_OFFSET);
                LCD_DATA_WRITE &= ~OUTPUT_DATA;
		LCD_DATA_WRITE |= (c & 0x0F) << LCD_DATA_OFFSET; 
		lcd_strobe();
	}
	else
	{
		LCD_DATA_WRITE = c;
		lcd_strobe();
	}
          
	LCD_RS(0);   
}

//******************************************************************
// initialize the LCD
//******************************************************************
void lcd_init(){
  
	char init_value;

	if (LCD_MODE == FOURBIT_MODE) init_value = 0x3 << LCD_DATA_OFFSET;
        else init_value = 0x3F;
	
	LCD_RS_DIR(OUTPUT_PIN);
	LCD_EN_DIR(OUTPUT_PIN);
	LCD_RW_DIR(OUTPUT_PIN);
        LCD_DATA_DIR |= OUTPUT_DATA;
        LCD_RS(0);
	LCD_EN(0);
	LCD_RW(0);
        
	DelayMs(15);
        LCD_DATA_WRITE &= ~OUTPUT_DATA;
	LCD_DATA_WRITE |= init_value;
	lcd_strobe();
	DelayMs(5);
        LCD_DATA_WRITE &= ~OUTPUT_DATA;
	LCD_DATA_WRITE |= init_value;
	lcd_strobe();
	DelayUs(200);
        LCD_DATA_WRITE &= ~OUTPUT_DATA;
	LCD_DATA_WRITE |= init_value;
	lcd_strobe();
	
	if (LCD_MODE == FOURBIT_MODE){
		LCD_WAIT; // may check LCD busy flag, or just delay a little, depending on lcd.h
                LCD_DATA_WRITE &= ~OUTPUT_DATA;
		LCD_DATA_WRITE |= 0x2 << LCD_DATA_OFFSET; // Set 4-bit mode
		lcd_strobe();
		lcd_cmd(0x28); // Function Set
	}
        else lcd_cmd(0x3C); // 8bit,two lines,5x10 dots 
	
	lcd_cmd(0xF); //Display On, Cursor On, Cursor Blink
	lcd_cmd(0x1); //Display Clear
	lcd_cmd(0x6); //Entry Mode
	lcd_cmd(0x80); //Initialize DDRAM address to zero
}
//******************************************************************
// write a string of chars to the LCD
//******************************************************************
void lcd_puts(const char *s, int size){
    int i;
    for (i=0; i<size; i++) {
    lcd_data(*s++);
  }
}
//******************************************************************
// Delay usec functions
//******************************************************************
void DelayUs(unsigned int cnt){
  
	unsigned char i;
        for(i=cnt ; i>0 ; i--) asm("nop"); // tha command asm("nop") takes raphly 1usec
	
}
//******************************************************************
// Delay msec functions
//******************************************************************
void DelayMs(unsigned int cnt){
  
	unsigned char i;
        for(i=cnt ; i>0 ; i--) DelayUs(1000); // tha command asm("nop") takes raphly 1usec
	
}
//******************************************************************
// lcd strobe functions
//******************************************************************
void lcd_strobe(){
  LCD_EN(1);
  asm("nop");
  asm("nop");
  LCD_EN(0);
}
//---------------------------------------------------------------------
//            TIMER A config for counting 345 ms
//---------------------------------------------------------------------
void Enable_TimerA_345(void){
  TACTL = TASSEL_2 + MC_1 + ID_3 + TAIE;    // SMCLK, up mode, divide SMCLK to become 2^17, TA interrupt enable 
}

void Disable_TimerA_345(void){
  TACCTL0 &= ~CCIE;         // Disable interrupts from timer
  TACTL =  MC_0 + TACLR;    // Stop mode, clear timer 
}
//---------------------------------------------------------------------
//            TIMER B config for PWM out
//---------------------------------------------------------------------
void Enable_TimerB_PWM(void){
  TBCCR0 = octave_frequencies[KP];
  TBCCR1 = octave_frequencies[KP] / 2;
  TBCCTL1 = OUTMOD_7;                    // Reset/set
  TBCTL = TBSSEL_2 + MC_1;    // SMCLK, up mode 
}

void Disable_TimerB_PWM(void){
  TBCTL = TBCLR + MC_0;    // Clear timer ,stop mode.
}

//---------------------------------------------------------------------
//            DMA config, reading arrays at channels 0&1 from memory to buzzer. 
//---------------------------------------------------------------------
void dma_config(){
  Disable_TimerA_345();
  Disable_TimerB_PWM();
  
  //Channel 0: Frequency
  DMA0SA = (int)chosen_song;   // Source block address
  DMA0DA = (int)&TBCCR0;       // Destination block address: TBCCR0 (clock period of TimerB outmod)
  DMA0SZ = song_length;               // Block size depends on song. 

  
  //Channel 1: DC
  DMA1SA = (int)chosen_song_dc;  // Source block address
  DMA1DA = (int)&TBCCR1;         // Destination block address: TBCCR1 (clock period of TimerB outmod)
  DMA1SZ = song_length;          // Block size depends on song.
  
  DMACTL0 = DMA0TSEL_1 + DMA1TSEL_1;              // TACCR2 trigger

  DMA0CTL = DMADT_4 + DMASRCINCR_3 + DMASWDW + DMAEN;  // word-word, Block transfer, inc src, DMA enable
  DMA1CTL = DMADT_4 + DMASRCINCR_3 + DMASWDW + DMAEN;    // word-word, Block transfer, inc src, DMA enable

  
  TBCCTL1 = OUTMOD_7;                    // Reset/set
  TBCTL = TBSSEL_2 + MC_1;    // SMCLK, up mode 
  
  TACTL = TASSEL_2 + MC_1 + ID_3;	//Enable timer A for DMA trigger
  TACCTL2 &= ~CCIE;
}

void dma_config_state_3(){  
  //Channel 0: string byte transfer.
  DMA0SA = (int)(str + sizeof(char)*156);   // Source block address
  DMA0DA = (int)strMirror;       // Destination block address: TBCCR0 (clock period of TimerB outmod)
  DMA0SZ = 157;               // Block size depends on song. 
  
  DMACTL0 = DMA0TSEL_1;              // TACCR2 trigger

  // Block transfer, dec src, inc dest, DMA enable, byte-byte.
  DMA0CTL = DMADT_1 + DMASRCINCR_2 + DMADSTINCR_3 + DMASBDB + DMAEN;  
  
  TACTL = TASSEL_2 + MC_1 + ID_3;	//Enable timer A for DMA trigger
  TACCR0 = 0x1000;                      // When using smclk counting until 0x1000.
  TACCTL2 &= ~CCIE;
}


void dma_disable(){
  // disable the two dma channels.
  DMA0CTL &= ~DMAEN;
  DMA1CTL &= ~DMAEN;
}

//---------------------------------------------------------------------
//            UI function to choose song option from LCD menu.
//---------------------------------------------------------------------
void choose_song_from_menu(){
  // every loop we clear the lcd and print two lines.
  while(display_screen <4) {
    switch(display_screen){
    case 0:
      lcd_clear();
      lcd_puts(audio_menu_1, 16);
      lcd_new_line;
      lcd_puts(audio_menu_2, 16);
      enterLPM(lpm_mode);    // wait for response.
      break;
    case 1:
      lcd_clear();
      lcd_puts(audio_menu_3, 14);
      lcd_new_line;
      lcd_puts(audio_menu_4, 16);
      enterLPM(lpm_mode);    // wait for response.
      break;
    case 2:
      lcd_clear();
      lcd_puts(audio_menu_5, 16);
      lcd_new_line;
      lcd_puts(audio_menu_6, 16);
      enterLPM(lpm_mode);    // wait for response.
      break;
    }
  }
  // in this part we going to save the chosen song of the user.
  switch(KP){
 
  case 1: case 2: case 3: case 10:
    chosen_song = song1;
    chosen_song_dc = song1_dc;
    song_length = 55;
    break;
  case 4: case 5: case 6: case 11:
    chosen_song = song2;
    chosen_song_dc = song2_dc;
    song_length = 48;
    break;
  case 7: case 8: case 9: case 12:
    chosen_song = song3;
    chosen_song_dc = song3_dc;
    song_length = 41;
    break;
  case 0: case 13: case 14: case 15:
    chosen_song    = recorder_song_freq;
    chosen_song_dc = recorder_song_dc;
    song_length = current_length;
    break;    
  }
}
//---------------------------------------------------------------------
//            Enter from LPM0 mode and enable global interrupts
//---------------------------------------------------------------------
void enterLPM(unsigned char LPM_level){
	if (LPM_level == 0x00) 
	  _BIS_SR(LPM0_bits + GIE);     /* Enter Low Power Mode 0 */
        else if(LPM_level == 0x01) 
	  _BIS_SR(LPM1_bits + GIE);     /* Enter Low Power Mode 1 */
        else if(LPM_level == 0x02) 
	  _BIS_SR(LPM2_bits + GIE);     /* Enter Low Power Mode 2 */
	else if(LPM_level == 0x03) 
	  _BIS_SR(LPM3_bits + GIE);     /* Enter Low Power Mode 3 */
        else if(LPM_level == 0x04) 
	  _BIS_SR(LPM4_bits + GIE);     /* Enter Low Power Mode 4 */
}


//*********************************************************************
//            TIMERA Interrupt Service Rotine
//*********************************************************************
#pragma vector = TIMERA1_VECTOR
__interrupt void Timer_A(void){
  Disable_TimerB_PWM();
  Disable_TimerA_345();
  LPM0_EXIT;
}

//*********************************************************************
//            Port1 Interrupt Service Rotine
//*********************************************************************
#pragma vector=PORT1_VECTOR
  __interrupt void PORT1_ISR(void){
   
	DelayUs(debounceVal);
//---------------------------------------------------------------------
//            selector of transition between states
//---------------------------------------------------------------------
	if(PBsArrIntPend & PB0){
	  state = state1;
          Disable_TimerB_PWM();   // shut down the DMA.
          display_screen = 4;       //dont show anything on the screen.
	  PBsArrIntPend &= ~PB0;
        }
        else if(PBsArrIntPend & PB1){
	  state = state2;
          display_screen = 0;     //show ui on the screen.
	  PBsArrIntPend &= ~PB1; 
        }
	else if(PBsArrIntPend & PB2){
          if(display_screen == 2){
            display_screen = 0;
          }else{
            display_screen += 1 ;
          }
	  PBsArrIntPend &= ~PB2;
        }
        else if(PBsArrIntPend & PB3){
	  state = state3;
	  PBsArrIntPend &= ~PB3; 
        }

  
//---------------------------------------------------------------------
//            Exit from a given LPM 
//---------------------------------------------------------------------	
        switch(lpm_mode){
		case mode0:
		 LPM0_EXIT; 
		 break;
		 
		case mode1:
		 LPM1_EXIT; 
		 break;
		 
		case mode2:
		 LPM2_EXIT; 
		 break;
                 
                case mode3:
		 LPM3_EXIT; 
		 break;
                 
                case mode4:
		 LPM4_EXIT; 
		 break;
	}
  }

//*********************************************************************
//            Port2 Interrupt Service Rotine (from KEY PAD)
//*********************************************************************
#pragma vector=PORT2_VECTOR
  __interrupt void PORT2_ISR(void){
   
	DelayUs(debounceVal);
        
        if (state != state0) {                               // If the KeyPad was pressed on sleeping mode

      KEY_PAD_PORT_OUT = 0x0E;
      if      ((KEY_PAD_PORT_IN & 0x10) == 0)   KP = 13;
      else if ((KEY_PAD_PORT_IN & 0x20) == 0)   KP = 14;
      else if ((KEY_PAD_PORT_IN & 0x40) == 0)   KP = 0;
      else if ((KEY_PAD_PORT_IN & 0x80) == 0)   KP = 15;
        
      KEY_PAD_PORT_OUT = 0x0D;
      if      ((KEY_PAD_PORT_IN & 0x10) == 0)   KP = 12;
      else if ((KEY_PAD_PORT_IN & 0x20) == 0)   KP = 9;
      else if ((KEY_PAD_PORT_IN & 0x40) == 0)   KP = 8;
      else if ((KEY_PAD_PORT_IN & 0x80) == 0)   KP = 7;
        
      KEY_PAD_PORT_OUT = 0x0B;
      if      ((KEY_PAD_PORT_IN & 0x10) == 0)   KP = 11;
      else if ((KEY_PAD_PORT_IN & 0x20) == 0)   KP = 6;
      else if ((KEY_PAD_PORT_IN & 0x40) == 0)   KP = 5;
      else if ((KEY_PAD_PORT_IN & 0x80) == 0)   KP = 4;

      KEY_PAD_PORT_OUT = 0x07;
      
      if      ((KEY_PAD_PORT_IN & 0x10) == 0)   KP = 10;
      else if ((KEY_PAD_PORT_IN & 0x20) == 0)   KP = 3;
      else if ((KEY_PAD_PORT_IN & 0x40) == 0)   KP = 2;
      else if ((KEY_PAD_PORT_IN & 0x80) == 0)   KP = 1;
 

      display_screen = 4;	// Exit scrren show to save chosen song		
      KEY_PAD_PORT_OUT = 0x00;
      KEY_PAD_INT_PEN &= ~0X02;   // clear p2.1 flag
    }

  
        
//---------------------------------------------------------------------
//            Exit from a given LPM 
//---------------------------------------------------------------------	
        switch(lpm_mode){
		case mode0:
		 LPM0_EXIT; 
		 break;
		 
		case mode1:
		 LPM1_EXIT; 
		 break;
		 
		case mode2:
		 LPM2_EXIT; 
		 break;
                 
                case mode3:
		 LPM3_EXIT; 
		 break;
                 
                case mode4:
		 LPM4_EXIT; 
		 break;
	}
        
}


